#include<iostream>
#define inf 2e8
using namespace std;
typedef struct edgenode{
	int index;
	int val;
	edgenode *next;
}edgenode;
typedef struct gnode{
	int data;
	edgenode *head;
}gnode,indlist[20000]; 
void create(indlist list,int e){
	int i,node1,node2,val1;
	for(i = 0;i < e;i++){
		scanf("%d%d%d",&node1,&node2,&val1);
		edgenode *p = new edgenode;
		p->index = node2;
		p->val = val1;
		p->next = list[node1].head;
		list[node1].head = p; 
	}
}
void find(indlist list,int *flag,int *dis,int *path,int n){
	int temp = 0;
	edgenode *p = list[temp].head;
	int i,j,distance = dis[temp],min;
	for(i = 0; i < n-1;i++){
		while(p){
			int num = p->index,val1 = p->val;
			if(flag[num] == 0 && distance + val1 < dis[num]){
				dis[num] = distance + val1;
				//path[num] = temp;                                   //path
			}
			p = p->next;
		}
		min = inf;
		for(j = 1;j < n;j++){
			if(flag[j] == 0 && dis[j] < min){
				temp = j;
				min = dis[j];
			}
		}
		flag[temp] = 1;
		distance = min;
		p = list[temp].head;
		if(min == inf)break; 
	}
}
int main(void){
	int n,e,i,flag[20000],dis[20000];
	int path[2];                               //path
	scanf("%d%d",&n,&e);
	indlist list;
	for(i = 0;i < n;i++){
		list[i].head = NULL;
		flag[i] = 0;
		dis[i] = inf;
		//path[i] = -1;                             //path
	}list[i].head = NULL;
	create(list,e);
	flag[0] = 1;
	dis[0] = 0;
	find(list,flag,dis,path,n);
	for(i = 1;i < n;i++){
		if(dis[i] != inf)printf("%d ",dis[i]);
		//if(dis[i] != inf)printf("%d\n",path[i]);         //path;
	}
}
